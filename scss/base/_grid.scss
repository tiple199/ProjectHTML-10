@use "sass:math";
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1370px
);
$grid-columns:12;
$grid-gutter-width:30px !default;
$gutters: (
  0: 0,
  1: 0.25,
  2: 0.5,
  3: 1,
  4: 1.5,
  5: 3,
);
%gutter-padding{
    padding-left: calc(var(--grid-gutter-x) * 0.5);
    padding-right: calc(var(--grid-gutter-x) * 0.5);
}
.container-fluid{
    --grid-gutter-x:#{$grid-gutter-width};
    --grid-gutter-y:#{$grid-gutter-width};
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    @extend %gutter-padding;
}
.container{
    @extend .container-fluid;
}
.row{
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(var(--grid-gutter-y) * -1);
    margin-left: calc(var(--grid-gutter-x) * 0.5 * -1);
    margin-right: calc(var(--grid-gutter-x) * 0.5 * -1);
    > *{
        margin-top: var(--grid-gutter-y);
        @extend %gutter-padding;
    }
}
.col{
    flex: 1 0 auto;
}

@mixin make-media-query($demension, $bypass: false){
    @if($bypass){
        @content;
    }
    @else{
        @media (min-width: $demension){
            @content;
        }
    }
}

@mixin make-row-column($infix){
    @for $i from 1 through $grid-columns * 0.5{
        .row-cols#{$infix}-#{$i} > *{
            width: math.div(100%, $i);
            flex: 0 0 auto;
        }
    }
}

@mixin make-column($infix){
    @for $i from 1 through $grid-columns{
        .col#{$infix}-#{$i}{
            width: math.div(100%, $grid-columns) * $i;
            flex: 0 0 auto;
        }
    }
}
@mixin make-offset($infix){
    @for $i from 0 to $grid-columns{
        .offset#{$infix}-#{$i}{
            margin-left: if($i > 0,math.div(100%, $grid-columns) * $i,$i);
        }
    }
}

@mixin make-gutter($infix){
    @each $i,$ratio in $gutters{
        .gx#{$infix}-#{$i},.g#{$infix}-#{$i}{
            --grid-gutter-x: #{$grid-gutter-width * $ratio};
        }
        .gy#{$infix}-#{$i},.g#{$infix}-#{$i}{
            --grid-gutter-y: #{$grid-gutter-width * $ratio};
        }
    }
}
@each $breakpoint,$demension in $grid-breakpoints{

    $max-width: map-get($map: $container-max-widths, $key: $breakpoint);
    $is_sx : $breakpoint == "xs";
    $infix: if($is_sx,"","-#{$breakpoint}");
    @include make-media-query($demension,$is_sx){
        .container{
                max-width: $max-width;
            }  
    };
    @include make-row-column($infix);
    @include make-column(($infix));
    @include make-offset($infix);
    @include make-gutter($infix);
}